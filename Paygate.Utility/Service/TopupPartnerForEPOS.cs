//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

// 
// This source code was auto-generated by wsdl, Version=4.0.30319.33440.
// 

namespace Paygate.Utility
{
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "TopupPartnerForEPOSSoap", Namespace = "https://paygate.vtc.vn/topuppartner/")]
    public partial class TopupPartnerForEPOS : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback CheckAccountExistsOperationCompleted;

        private System.Threading.SendOrPostCallback TopupPartnerAccountOperationCompleted;

        /// <remarks/>
        public TopupPartnerForEPOS()
        {
            this.Url = System.Configuration.ConfigurationManager.AppSettings["Topup.Partner.API"];
            //"http://localhost:2931/TopupPartnerForEPOS.asmx";
        }

        /// <remarks/>
        public event CheckAccountExistsCompletedEventHandler CheckAccountExistsCompleted;

        /// <remarks/>
        public event TopupPartnerAccountCompletedEventHandler TopupPartnerAccountCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://paygate.vtc.vn/topuppartner/CheckAccountExists", RequestNamespace = "https://paygate.vtc.vn/topuppartner/", ResponseNamespace = "https://paygate.vtc.vn/topuppartner/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckAccountExists(string PartnerCode, string GameTypeId, string CustomerAccountName)
        {
            object[] results = this.Invoke("CheckAccountExists", new object[] {
                    PartnerCode,
                    GameTypeId,
                    CustomerAccountName});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCheckAccountExists(string PartnerCode, string GameTypeId, string CustomerAccountName, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CheckAccountExists", new object[] {
                    PartnerCode,
                    GameTypeId,
                    CustomerAccountName}, callback, asyncState);
        }

        /// <remarks/>
        public string EndCheckAccountExists(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void CheckAccountExistsAsync(string PartnerCode, string GameTypeId, string CustomerAccountName)
        {
            this.CheckAccountExistsAsync(PartnerCode, GameTypeId, CustomerAccountName, null);
        }

        /// <remarks/>
        public void CheckAccountExistsAsync(string PartnerCode, string GameTypeId, string CustomerAccountName, object userState)
        {
            if ((this.CheckAccountExistsOperationCompleted == null))
            {
                this.CheckAccountExistsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckAccountExistsOperationCompleted);
            }
            this.InvokeAsync("CheckAccountExists", new object[] {
                    PartnerCode,
                    GameTypeId,
                    CustomerAccountName}, this.CheckAccountExistsOperationCompleted, userState);
        }

        private void OnCheckAccountExistsOperationCompleted(object arg)
        {
            if ((this.CheckAccountExistsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckAccountExistsCompleted(this, new CheckAccountExistsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://paygate.vtc.vn/topuppartner/TopupPartnerAccount", RequestNamespace = "https://paygate.vtc.vn/topuppartner/", ResponseNamespace = "https://paygate.vtc.vn/topuppartner/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TopupPartnerAccount(
                    string PartnerCode,
                    string GameTypeId,
                    string GameCode,
                    string ServiceId,
                    int ServiceCode,
                    long LogDeductID,
                    string VTCAccountName,
                    int VTCAccountId,
                    string CustomerAccountName,
                    int TotalVcoin,
                    double TotalAmount,
                    string TransactionDetail,
                    string FromIP,
                    string ExtendedField1,
                    string ExtendedField2,
                    string ExtendedField3,
                    string PassWord,
                    string PaymentCode)
        {
            object[] results = this.Invoke("TopupPartnerAccount", new object[] {
                    PartnerCode,
                    GameTypeId,
                    GameCode,
                    ServiceId,
                    ServiceCode,
                    LogDeductID,
                    VTCAccountName,
                    VTCAccountId,
                    CustomerAccountName,
                    TotalVcoin,
                    TotalAmount,
                    TransactionDetail,
                    FromIP,
                    ExtendedField1,
                    ExtendedField2,
                    ExtendedField3,
                    PassWord,
                    PaymentCode});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginTopupPartnerAccount(
                    string PartnerCode,
                    string GameTypeId,
                    string GameCode,
                    string ServiceId,
                    int ServiceCode,
                    long LogDeductID,
                    string VTCAccountName,
                    int VTCAccountId,
                    string CustomerAccountName,
                    int TotalVcoin,
                    double TotalAmount,
                    string TransactionDetail,
                    string FromIP,
                    string ExtendedField1,
                    string ExtendedField2,
                    string ExtendedField3,
                    string PassWord,
                    string PaymentCode,
                    System.AsyncCallback callback,
                    object asyncState)
        {
            return this.BeginInvoke("TopupPartnerAccount", new object[] {
                    PartnerCode,
                    GameTypeId,
                    GameCode,
                    ServiceId,
                    ServiceCode,
                    LogDeductID,
                    VTCAccountName,
                    VTCAccountId,
                    CustomerAccountName,
                    TotalVcoin,
                    TotalAmount,
                    TransactionDetail,
                    FromIP,
                    ExtendedField1,
                    ExtendedField2,
                    ExtendedField3,
                    PassWord,
                    PaymentCode}, callback, asyncState);
        }

        /// <remarks/>
        public string EndTopupPartnerAccount(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void TopupPartnerAccountAsync(
                    string PartnerCode,
                    string GameTypeId,
                    string GameCode,
                    string ServiceId,
                    int ServiceCode,
                    long LogDeductID,
                    string VTCAccountName,
                    int VTCAccountId,
                    string CustomerAccountName,
                    int TotalVcoin,
                    double TotalAmount,
                    string TransactionDetail,
                    string FromIP,
                    string ExtendedField1,
                    string ExtendedField2,
                    string ExtendedField3,
                    string PassWord,
                    string PaymentCode)
        {
            this.TopupPartnerAccountAsync(PartnerCode, GameTypeId, GameCode, ServiceId, ServiceCode, LogDeductID, VTCAccountName, VTCAccountId, CustomerAccountName, TotalVcoin, TotalAmount, TransactionDetail, FromIP, ExtendedField1, ExtendedField2, ExtendedField3, PassWord, PaymentCode, null);
        }

        /// <remarks/>
        public void TopupPartnerAccountAsync(
                    string PartnerCode,
                    string GameTypeId,
                    string GameCode,
                    string ServiceId,
                    int ServiceCode,
                    long LogDeductID,
                    string VTCAccountName,
                    int VTCAccountId,
                    string CustomerAccountName,
                    int TotalVcoin,
                    double TotalAmount,
                    string TransactionDetail,
                    string FromIP,
                    string ExtendedField1,
                    string ExtendedField2,
                    string ExtendedField3,
                    string PassWord,
                    string PaymentCode,
                    object userState)
        {
            if ((this.TopupPartnerAccountOperationCompleted == null))
            {
                this.TopupPartnerAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTopupPartnerAccountOperationCompleted);
            }
            this.InvokeAsync("TopupPartnerAccount", new object[] {
                    PartnerCode,
                    GameTypeId,
                    GameCode,
                    ServiceId,
                    ServiceCode,
                    LogDeductID,
                    VTCAccountName,
                    VTCAccountId,
                    CustomerAccountName,
                    TotalVcoin,
                    TotalAmount,
                    TransactionDetail,
                    FromIP,
                    ExtendedField1,
                    ExtendedField2,
                    ExtendedField3,
                    PassWord,
                    PaymentCode}, this.TopupPartnerAccountOperationCompleted, userState);
        }

        private void OnTopupPartnerAccountOperationCompleted(object arg)
        {
            if ((this.TopupPartnerAccountCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TopupPartnerAccountCompleted(this, new TopupPartnerAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void CheckAccountExistsCompletedEventHandler(object sender, CheckAccountExistsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckAccountExistsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CheckAccountExistsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void TopupPartnerAccountCompletedEventHandler(object sender, TopupPartnerAccountCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TopupPartnerAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal TopupPartnerAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}